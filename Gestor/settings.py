"""
Django settings for Gestor project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

#cargamos las variables 
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-=ai=gef6^h(*o7#f@1oo47g05#8q0u&p5-(*9!^7nfk(41ciqz"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost','127.0.0.1']


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "ckeditor",
    "ckeditor_uploader",
    # Django apps
    #Apps
    "apps.usuarios",
    "apps.gastos",
    "rest_framework",
    'django.contrib.sites',
    "apps.contacto",
    "apps.social",
    "apps.preguntas",
    "apps.Blog",
    
    # Allauth apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    # Proveedores sociales
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.github',
    'allauth.socialaccount.providers.facebook',

    
    
]

CKEDITOR_UPLOAD_PATH = 'uploads/'
CKEDITOR_CONFIGS = {
    'toolbar': 'full'
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = "Gestor.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR/'templates'],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "apps.social.processors.ctx_dict",
            ],
        },
    },
]

WSGI_APPLICATION = "Gestor.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get('NAME_BD'),
        "USER": os.environ.get('USER_BD'),
        "PASSWORD": os.environ.get('PASSWORD_BD'), 
        "HOST": os.environ.get('HOST_BD'),
        "PORT": os.environ.get('PORT_BD'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "es"

TIME_ZONE =  'America/Argentina/Buenos_Aires'

USE_I18N = True

USE_TZ = True


#Ckeditor
CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'none',
       
        
        
    }
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'staticfiles'

#Archivos media 

MEDIA_URL ='/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

#Configurar el id del sitio
SITE_ID = 1

LOGIN_URL = '/accounts/login/'
#Redireccionar luego de que se registre 
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

#Configuración de email con mailtrap.io, así simulamos el envío de un mensaje por parte de un usuario.
"""
Para recibir correos en mailtrap.io, se tiene que crear una cuenta y completar los datos que corresponda a tu usuario, de lo contrario los correos se envian a EMAIL_BACKEND QUE CONFIGURAMOS EN DEBUG
"""
EMAIL_HOST = os.environ.get('EMAIL_HOST')
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
EMAIL_PORT = os.environ.get('EMAIL_PORT')

if DEBUG:
    # Configuración de correo electrónico para desarrollo, modo de prueba
    #EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'
    #EMAIL_FILE_PATH = BASE_DIR / 'sent_emails'  # Directorio para almacenar correos enviados
    pass
else:
    # Configuración de correo electrónico para producción
    #EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    #EMAIL_HOST = 'smtp.example.com'  # Cambia esto por tu servidor SMTP
    pass